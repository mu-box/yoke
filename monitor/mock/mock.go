// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/mu-box/yoke/monitor (interfaces: Performer)

package mock_monitor

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Performer interface
type MockPerformer struct {
	ctrl     *gomock.Controller
	recorder *_MockPerformerRecorder
}

// Recorder for MockPerformer (not exported)
type _MockPerformerRecorder struct {
	mock *MockPerformer
}

func NewMockPerformer(ctrl *gomock.Controller) *MockPerformer {
	mock := &MockPerformer{ctrl: ctrl}
	mock.recorder = &_MockPerformerRecorder{mock}
	return mock
}

func (_m *MockPerformer) EXPECT() *_MockPerformerRecorder {
	return _m.recorder
}

func (_m *MockPerformer) Initialize() error {
	ret := _m.ctrl.Call(_m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPerformerRecorder) Initialize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Initialize")
}

func (_m *MockPerformer) Loop() error {
	ret := _m.ctrl.Call(_m, "Loop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPerformerRecorder) Loop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Loop")
}

func (_m *MockPerformer) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPerformerRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockPerformer) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

func (_mr *_MockPerformerRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockPerformer) TransitionToActive() {
	_m.ctrl.Call(_m, "TransitionToActive")
}

func (_mr *_MockPerformerRecorder) TransitionToActive() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TransitionToActive")
}

func (_m *MockPerformer) TransitionToBackup() {
	_m.ctrl.Call(_m, "TransitionToBackup")
}

func (_mr *_MockPerformerRecorder) TransitionToBackup() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TransitionToBackup")
}

func (_m *MockPerformer) TransitionToSingle() {
	_m.ctrl.Call(_m, "TransitionToSingle")
}

func (_mr *_MockPerformerRecorder) TransitionToSingle() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TransitionToSingle")
}
